{"version":3,"sources":["../src/PriorityQueue.js"],"names":[],"mappings":"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","file":"PriorityQueue.js","sourcesContent":["\nclass PriorityQueue {\n    constructor() {\n        this.heap = [];\n    }\n\n    // TODO: make it an option, for max or min priority queue\n    _compare(a, b) {\n        return a.key - b.key;\n    }\n\n    _bubbleUp(idx) {\n        let element = this.heap[idx];\n        let parentIdx;\n        let parent;\n        while (idx > 0) {\n            // Compute the parent element's index, and fetch it.\n            parentIdx = Math.floor((idx + 1) / 2) - 1;\n            parent = this.heap[parentIdx];\n            // If the parent has a lesser score, things are in order and we\n            // are done.\n            if (this._compare(element, parent) > 0) {\n                break;\n            }\n\n            // Otherwise, swap the parent with the current element and\n            // continue.\n            this.heap[parentIdx] = element;\n            this.heap[idx] = parent;\n            idx = parentIdx;\n        }\n    }\n\n    _sinkDown(idx) {\n        let length = this.heap.length;\n        let element = this.heap[idx];\n        let swapIdx;\n\n        while(true) {\n            let rChildIdx = (idx + 1) * 2;\n            let lChildIdx = rChildIdx - 1;\n            swapIdx = -1;\n\n            // if the first child exists\n            if (lChildIdx < length) {\n                let lChild = this.heap[lChildIdx];\n                // and is lower than the element, they must be swapped\n                if (this._compare(lChild, element) < 0) {\n                    swapIdx = lChildIdx;\n                }\n\n                // unless there is another lesser child, which will be the one swapped\n                if (rChildIdx < length) {\n                    const rChild = this.heap[rChildIdx];\n                    if ((swapIdx === -1 || this._compare(rChild, lChild) < 0) && this._compare(rChild, element) < 0) {\n                        swapIdx = rChildIdx;\n                    }\n                }\n            }\n\n            // if no swap occurs, the element found its right place\n            if (swapIdx === -1) {\n                break;\n            }\n\n            // otherwise, swap and continue on next tree level\n            this.heap[idx] = this.heap[swapIdx];\n            this.heap[swapIdx] = element;\n            idx = swapIdx;\n        }\n    }\n\n    _findElementIndex(elt) {\n        for (let i = 0, l = this.heap.length; i < l; i++) {\n            if (this.heap[i].elt === elt) { return i; }\n        }\n        return -1;\n    }\n\n    get count() {\n        return this.heap.length;\n    }\n\n    insert(element, key) {\n        this.heap.push({elt: element, key: key});\n        this._bubbleUp(this.heap.length - 1);\n    }\n\n    pop() {\n        if (this.heap.length === 0) {\n            return null;\n        }\n        const elt = this.heap[0];\n        const end = this.heap.pop();\n        // replace the first element by the last,\n        // and let it sink to its right place\n        if (this.heap.length > 0) {\n            this.heap[0] = end;\n            this._sinkDown(0);\n        }\n        return elt;\n    }\n\n    peek() {\n        if (this.heap.length === 0) {\n            return null;\n        }\n        return this.heap[0];\n    }\n\n    updateKey(element, newKey) {\n        const idx = this._findElementIndex(element);\n        if (idx === -1) {\n            return;\n        }\n        const oldKey = this.heap[idx].key;\n        this.heap[idx].key = newKey;\n        if (newKey < oldKey) {\n            this._bubbleUp(idx);\n        } else {\n            this._sinkDown(idx);\n        }\n    }\n};\n\nexport default PriorityQueue;\n"]}